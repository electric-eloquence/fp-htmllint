document.addEventListener(
  'DOMContentLoaded',
  function () {
    'use strict';
    (() => {
      const uiFns = window.FEPPER_UI.uiFns;
      
      $('.sg-nav-toggle').click(function (e) {
        e.preventDefault();
      
        const $sgNavContainer = $('.sg-nav-container');
        const isActive = $sgNavContainer.hasClass('active');
      
        uiFns.closeAllPanels();
      
        if (!isActive) {
          $sgNavContainer.addClass('active');
        }
      });
    })();
    (() => {
      const uiFns = window.FEPPER_UI.uiFns;
      
      // Accordion dropdown
      $('.sg-acc-handle').not('#sg-f-toggle').click(function (e) {
        e.preventDefault();
      
        const $this = $(this);
        const $panel = $this.next('.sg-acc-panel');
      
        uiFns.closeOtherPanels(this);
      
        // Activate selected panel.
        $this.toggleClass('active');
        $panel.toggleClass('active');
      });
    })();
    (() => {
      const uiFns = window.FEPPER_UI.uiFns;
      const uiProps = window.FEPPER_UI.uiProps;
      
      const stopDisco = uiFns.stopDisco;
      const stopGrow = uiFns.stopGrow;
      const startDisco = uiFns.startDisco;
      const startGrow = uiFns.startGrow;
      
      const sizeiframe = uiFns.sizeiframe;
      const updateSizeReading = uiFns.updateSizeReading;
      
      const bodyFontSize = uiProps.bodyFontSize;
      const $sgSize = $('.sg-size');
      const $sgFormLabel = $('#sg-form-label');
      const $sgSizeEms = $('#sg-size-em'); // Em size input element in toolbar.
      const $sgSizePx = $('#sg-size-px'); // Px size input element in toolbar.
      const $window = $(window);
      
      // Toggle hidden sg-size-options buttons at small sw.
      $sgFormLabel.click(function (e) {
        e.preventDefault();
      
        if (uiProps.sw > 767 && uiProps.sw <= 1024) {
          $sgFormLabel.parents('.sg-size').toggleClass('active');
        }
      });
      
      // Remove active classes if browser is resized outside small sw.
      $window.resize(function () {
        if (uiProps.sw <= 767 || uiProps.sw > 1024) {
          $sgSize.removeClass('active');
          $sgFormLabel.removeClass('active');
        }
      });
      
      // Em input.
      $sgSizeEms.keydown(function (e) {
        let val = parseFloat($(this).val());
      
        if (Number.isNaN(val)) {
          return;
        }
      
        if (e.keyCode === 38) { // If the up arrow key is hit.
          val++;
          sizeiframe(Math.round(val * bodyFontSize), false);
        }
        else if (e.keyCode === 40) { // If the down arrow key is hit.
          val--;
          sizeiframe(Math.round(val * bodyFontSize), false);
        }
        else if (e.keyCode === 13) { // If the Enter key is hit.
          e.preventDefault();
          sizeiframe(Math.round(val * bodyFontSize)); // Size iframe to value of text box.
        }
      });
      
      $sgSizeEms.keyup(function () {
        const val = parseFloat($(this).val());
      
        updateSizeReading(val, 'em', 'updatePxInput');
      });
      
      // Pixel input.
      $sgSizePx.keydown(function (e) {
        let val = parseInt($(this).val(), 10);
      
        if (Number.isNaN(val)) {
          return;
        }
      
        if (e.keyCode === 38) { // If the up arrow key is hit.
          val++;
          sizeiframe(val, false);
        }
        else if (e.keyCode === 40) { // If the down arrow key is hit.
          val--;
          sizeiframe(val, false);
        }
        else if (e.keyCode === 13) { // If the Enter key is hit.
          e.preventDefault();
          sizeiframe(val); // Size iframe to value of text box.
          $(this).blur();
        }
      });
      
      $sgSizePx.keyup(function () {
        const val = $(this).val();
      
        updateSizeReading(val, 'px', 'updateEmInput');
      });
      
      // Click whole width button.
      $('#sg-size-w').click(function (e) {
        e.preventDefault();
        uiFns.goWhole();
      });
      
      // Click Random Size Button.
      $('#sg-size-random').click(function (e) {
        e.preventDefault();
        uiFns.goRandom();
      });
      
      // Click for Disco Mode, which resizes the viewport randomly.
      $('#sg-size-disco').click(function (e) {
        e.preventDefault();
        stopGrow();
      
        if (uiProps.discoMode) {
          stopDisco();
        }
        else {
          startDisco();
        }
      });
      
      // Grow Mode.
      // "Start with the small screen first, then expand until it looks like shit. Time for a breakpoint!"
      // - Stephen Hay
      $('#sg-size-grow').click(function (e) {
        e.preventDefault();
        stopDisco();
      
        if (uiProps.growMode) {
          stopGrow();
        }
        else {
          startGrow();
        }
      });
    })();
    (() => {
      const annotationsViewer = window.annotationsViewer;
      const codeViewer = window.codeViewer;
      const uiProps = window.FEPPER_UI.uiProps;
      
      // Annotations toggle click handler.
      uiProps.sgTAnnotations.addEventListener(
        'click',
        function (e) {
          e.preventDefault();
      
          if (annotationsViewer.mustacheBrowser) {
            return;
          }
      
          annotationsViewer.toggleAnnotations();
      
          // If viewall, scroll to the focused pattern.
          if (annotationsViewer.viewall) {
            annotationsViewer.scrollViewall();
          }
        },
        false
      );
      
      // Code toggle click handler.
      uiProps.sgTCode.addEventListener(
        'click',
        function (e) {
          e.preventDefault();
      
          if (codeViewer.mustacheBrowser) {
            return;
          }
      
          codeViewer.toggleCode();
      
          // If viewall, scroll to the focused pattern.
          if (codeViewer.viewall) {
            codeViewer.scrollViewall();
          }
        },
        false
      );
      
      // Click handler for "Open in new window" link.
      // Do not use Event.preventDefault().
      $('#sg-view li a').click(function () {
        $(this).parent().parent().removeClass('active');
        uiProps.sgTToggle.classList.remove('active');
      });
    })();
    (() => {
      // Click handler for documentation links.
      // Do not use Event.preventDefault().
      $('.sg-tools .sg-checklist-icon').click(function (e) {
        const $this = $(this);
        const $sgChecklist = $this.parents('.sg-checklist');
        const $sgToolsToggle = $sgChecklist.prev('#sg-tools-toggle');
      
        $sgChecklist.removeClass('active');
        $sgToolsToggle.removeClass('active');
      });
    })();
    (() => {
      const annotationsViewer = window.annotationsViewer;
      const codeViewer = window.codeViewer;
      const uiFns = window.FEPPER_UI.uiFns;
      const uiProps = window.FEPPER_UI.uiProps;
      
      // On "mouseup" we unbind the "mousemove" event and hide the cover again.
      $('body').mouseup(function () {
        $('#sg-cover').unbind('mousemove');
        $('#sg-cover').css('display', 'none');
      });
      
      // Make sure that if a new pattern or viewall is loaded, that annotations are turned on as appropriate.
      uiProps.sgViewport.addEventListener(
        'load',
        function () {
          if (annotationsViewer.annotationsActive) {
            uiProps.sgViewport.contentWindow.postMessage({annotationsToggle: 'on'}, uiProps.targetOrigin);
          }
      
          if (codeViewer.codeActive) {
            uiProps.sgViewport.contentWindow.postMessage({codeToggle: 'on'}, uiProps.targetOrigin);
          }
        },
        false
      );
      
      // Handle widening the viewport.
      //   1. On "mousedown" store the click location.
      //   2. Make a hidden div visible so that it can track mouse movements and make sure the pointer doesn't get lost
      //      in the iframe.
      //   3. On "mousemove" calculate the math, save the results to a cookie, and update the viewport.
      $('#sg-rightpull').mousedown(function (e) {
      
        // Capture default data.
        const dataSaver = window.dataSaver;
        const origClientX = e.clientX;
        const origViewportWidth = uiProps.sgViewport.clientWidth;
      
        uiProps.wholeMode = false;
      
        // Show the cover.
        $('#sg-cover').css('display', 'block');
      
        // Add the mouse move event and capture data. Also update the viewport width.
        $('#sg-cover').mousemove(function (e) {
          const viewportWidth = origViewportWidth + 2 * (e.clientX - origClientX);
      
          if (viewportWidth > uiProps.minViewportWidth) {
      
            if (!dataSaver.findValue('vpWidth')) {
              dataSaver.addValue('vpWidth', viewportWidth);
            }
            else {
              dataSaver.updateValue('vpWidth', viewportWidth);
            }
      
            uiFns.sizeiframe(viewportWidth, false);
          }
        });
      });
    })();
  },
  false
);
